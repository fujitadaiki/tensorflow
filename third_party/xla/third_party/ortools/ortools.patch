diff --git a/cmake/glop.cmake b/cmake/glop.cmake
index 33f4c2c0e6..50e36cbab7 100644
--- a/cmake/glop.cmake
+++ b/cmake/glop.cmake
@@ -89,8 +89,6 @@ target_sources(glop PRIVATE
   ortools/base/sysinfo.h
   ortools/base/version.cc
   ortools/base/version.h
-  ortools/base/vlog_is_on.cc
-  ortools/base/vlog_is_on.h
   ortools/glop/basis_representation.cc
   ortools/glop/basis_representation.h
   ortools/glop/dual_edge_norms.cc
@@ -308,7 +306,6 @@ install(FILES
   ortools/base/recordio.h
   ortools/base/sysinfo.h
   ortools/base/timer.h
-  ortools/base/vlog_is_on.h
   DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/ortools/base
   COMPONENT Devel)
 install(FILES
diff --git a/ortools/base/BUILD.bazel b/ortools/base/BUILD.bazel
index 965f9f82fd..bdc341003a 100644
--- a/ortools/base/BUILD.bazel
+++ b/ortools/base/BUILD.bazel
@@ -312,7 +312,6 @@ cc_library(
     hdrs = ["logging.h"],
     deps = [
         ":macros",
-        ":vlog",
         "@com_google_absl//absl/base:log_severity",
         "@com_google_absl//absl/flags:flag",
         "@com_google_absl//absl/flags:usage",
@@ -329,21 +328,6 @@ cc_library(
     ],
 )
 
-cc_library(
-    name = "vlog",
-    srcs = ["vlog_is_on.cc"],
-    hdrs = [
-        "vlog.h",
-        "vlog_is_on.h",
-    ],
-    deps = [
-        ":integral_types",
-        "@com_google_absl//absl/flags:flag",
-        "@com_google_absl//absl/log",
-        "@com_google_absl//absl/log:check",
-    ],
-)
-
 cc_library(
     name = "macros",
     hdrs = ["macros.h"],
diff --git a/ortools/base/file.cc b/ortools/base/file.cc
index fa627c9393..f73ce96bda 100644
--- a/ortools/base/file.cc
+++ b/ortools/base/file.cc
@@ -186,7 +186,7 @@ absl::Status GetContents(const absl::string_view& filename, std::string* output,
   }
 #endif  // _MSC_VER
 
-  file->Close(flags);  // Even if ReadToString() fails!
+  file->Close(flags).IgnoreError();
   return absl::Status(absl::StatusCode::kInvalidArgument,
                       absl::StrCat("Could not read from '", filename, "'."));
 }
diff --git a/ortools/base/logging.h b/ortools/base/logging.h
index 7f570f969e..7d959a13d1 100644
--- a/ortools/base/logging.h
+++ b/ortools/base/logging.h
@@ -14,21 +14,18 @@
 #ifndef OR_TOOLS_BASE_LOGGING_H_
 #define OR_TOOLS_BASE_LOGGING_H_
 
-#define ABSL_LOG_INTERNAL_CONDITION_DFATAL ABSL_LOG_INTERNAL_CONDITION_ERROR
-#define kLogDebugFatal LogSeverity::kError
-#define kDebugFatal kError
-
 #include "absl/base/log_severity.h"
 #include "absl/flags/declare.h"
+#include "absl/log/check.h"
 #include "absl/log/die_if_null.h"
 #include "absl/log/log.h"
+#include "absl/log/vlog_is_on.h"
 #include "absl/memory/memory.h"
 #include "absl/status/status.h"
 #include "absl/strings/str_cat.h"
 #include "absl/strings/string_view.h"
 #include "google/protobuf/message.h"
 #include "ortools/base/macros.h"
-#include "ortools/base/vlog.h"
 
 // Compatibility layer for glog/previous logging code.
 ABSL_DECLARE_FLAG(bool, logtostderr);
@@ -42,25 +39,4 @@ void FixFlagsAndEnvironmentForSwig();
 
 }  // namespace operations_research
 
-// Compatibility layer for SCIP
-namespace google {
-enum LogSeverity {
-  GLOG_INFO = static_cast<int>(absl::LogSeverity::kInfo),
-  GLOG_WARNING = static_cast<int>(absl::LogSeverity::kWarning),
-  GLOG_ERROR = static_cast<int>(absl::LogSeverity::kError),
-  GLOG_FATAL = static_cast<int>(absl::LogSeverity::kFatal),
-};
-}  // namespace google
-
-// Implementation of the `AbslStringify` interface. This adds `DebugString()`
-// to the sink. Do not rely on exact format.
-namespace google {
-namespace protobuf {
-template <typename Sink>
-void AbslStringify(Sink& sink, const Message& msg) {
-  sink.Append(msg.DebugString());
-}
-}  // namespace protobuf
-}  // namespace google
-
 #endif  // OR_TOOLS_BASE_LOGGING_H_
